{"version":3,"sources":["components/styledcomponents/AkumaHeader.js","components/AkumaForm.js","components/styledcomponents/AkumaText.js","components/CalculateView.js","components/styledcomponents/ResultImg.js","components/AkumaNumberImg.js","components/AkumaNumberTripleImg.js","components/AkumaView.js","components/AkumaPieChart.js","components/AkumaLineChart.js","components/AkumaChart.js","components/styledcomponents/NotResultImg.js","components/AkumaNotResult.js","components/AkumaResult.js","components/styledcomponents/AkumaComponent.js","components/App.js","logics/akuma.js","actions/index.js","containers/App.js","reducers/setValue.js","reducers/index.js","index.js","images/6_mozaiku.jpg","images/666_mozaiku.jpg","images/isNuN_mozaiku.jpg"],"names":["AkumaHeader","styled","h1","AkumaForm","props","handleChange","e","setState","input","target","value","state","id","type","this","onChange","Button","variant","onClick","handleClick","React","Component","AkumaText","h2","PureCalculateView","pure","resultText","ResultImg","img","PureAkumaNumberImg","src","Img","PureAkumaNumberTripleImg","AkumaView","akumaNumberImg","akumaNumberResult","resultTexts","map","i","key","AkumaPieChart","data","labels","datasets","akumaNumberCount","backgroundColor","style","width","margin","options","legend","fontColor","maintainAspectRatio","responsive","AkumaLineChart","akumaNumberFrequency","label","borderColor","fill","scales","xAxes","gridLines","color","ticks","yAxes","AkumaChart","lastAkumaNumberFrequency","slice","akumaNumber","akumaNumberTriple","other","dx","forEach","frequency","push","NotResultImg","AkumaNotResult","AkumaResult","akumaResultView","inputResult","isNaN","AkumaComponents","div","App","setValue","inputValue","reverseAkumaNumber","reverseAkumaNUmberTriple","specialAkumaNUmber1","specialAkumaNUmber2","reverseAkumaNumberText","reverseAkumaNUmberTripleText","specialAkumaNUmber1Text","specialAkumaNUmber2Text","addOperator","multOperator","akumaNumberDecision","checkAkumaNumber","akumaNumberCheck","calculationOneDigit","number","reverseAndSpecialAkumaNumberCheck","calculationCount","operator","calculationProcessNumber","x","parseInt","numberSplitOneDigit","calculationResult","reduce","a","b","numberAddOneDigit","numberMultOneDigit","calculationProcessTextCreate","splice","SET_VALUE_POSITIVE","SET_VALUE_NEGATIVE","akumaNukberFrequency","arrayPosition","beforAkumaNumberCount","beforAkumaNumberTripleCount","beforOtherCount","akumaNumberTripleCount","otherCount","akumanumberFrequency","Math","abs","connect","dispatch","bindActionCreators","Actions","initialState","prevState","action","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.662e0c37.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst AkumaHeader = styled.h1 `\n    color: white;\n`\n\nexport default AkumaHeader; ","import React from 'react'\nimport {Button} from 'react-bootstrap'\nimport AkumaHeader from './styledcomponents/AkumaHeader'\n\nclass AkumaForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\"\n        };\n    }\n    render() {\n        return(\n            <div id=\"akuma-form\">\n                <div>\n                    <input type=\"text\" value={this.state.input} onChange={this.handleChange}/>\n                    <Button variant=\"dark\" onClick={() => this.props.handleClick(this.state.input)}>解き明かす…</Button>\n                </div>\n            </div> \n        );\n    }\n\n    handleChange = e => {\n        this.setState({input: e.target.value});\n    }\n}\nexport default AkumaForm;","import styled from 'styled-components'\n\nconst AkumaText = styled.h2 `\n    color: white;\n`\n\nexport default AkumaText; ","import {pure} from 'recompose'\nimport React from 'react'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst CalculateView = (props => {\n    return(\n        <div>\n            <AkumaText>{props.resultText}</AkumaText>\n            <AkumaText>↓</AkumaText>\n      </div>\n    );\n});\n\nconst PureCalculateView = pure(CalculateView);\n\nexport default PureCalculateView;","import styled from 'styled-components'\n\nconst ResultImg = styled.img `\n    height: 240px;\n    width: 420px;\n`\n\nexport default ResultImg;","import React from 'react'\nimport {pure} from 'recompose'\nimport Img from '../images/6_mozaiku.jpg'\nimport ResultImg from './styledcomponents/ResultImg'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst AkumaNumberImg = (props => {\n    return(\n        <div>\n            <AkumaText>悪魔の数字</AkumaText>\n            <ResultImg id=\"akumanumber-img\" src={Img} />        \n        </div>\n    );\n});\n\nconst PureAkumaNumberImg = pure(AkumaNumberImg);\n\nexport default PureAkumaNumberImg;","import React from 'react'\nimport {pure} from 'recompose'\nimport Img from '../images/666_mozaiku.jpg'\nimport ResultImg from './styledcomponents/ResultImg'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst AkumaNumberTripleImg = (props => {\n    return(\n        <div>\n            <AkumaText>悪魔の数字　フリーメイソン!!</AkumaText>\n            <ResultImg src={Img} />        \n        </div>\n    );\n});\n\nconst PureAkumaNumberTripleImg = pure(AkumaNumberTripleImg);\n\nexport default PureAkumaNumberTripleImg;","import React from 'react'\nimport CalculateView from './CalculateView'\nimport AkumaNumberImg from './AkumaNumberImg';\nimport AkumaNumberTripleImg from './AkumaNumberTripleImg';\n\nclass AkumaView extends React.Component {\n    render() {\n        let akumaNumberImg;\n\n        switch(this.props.akumaNumberResult) {\n            case 6:\n                akumaNumberImg = <AkumaNumberImg />\n            break;\n\n            case 666:\n                akumaNumberImg = <AkumaNumberTripleImg />\n\n            break;\n        }\n        return(\n            <div>\n                {this.props.resultTexts.map((resultText, i) => <CalculateView key={i} resultText={resultText} />)}\n                {akumaNumberImg}\n            </div>\n        );\n    }\n}\nexport default AkumaView;","import React from 'react'\nimport {Pie} from 'react-chartjs-2'\n\nclass AkumaPieChart extends React.Component {\n    render() {\n        const data = {\n          labels: ['6', '666', 'other'],\n          datasets: [\n            {\n              data: [\n                  this.props.akumaNumberCount['akumaNumberCount'], \n                  this.props.akumaNumberCount['akumaNumberTripleCount'], \n                  this.props.akumaNumberCount['otherCount']\n                ],\n              backgroundColor: [\n                  '#9400d3',  // darkViolet\n                  '#ffff00',  // yellow\n                  '#808080'   //gray\n              ,]\n\n            },\n          ],\n        };\n        const options = {\n            legend: {\n                labels: {\n                    fontColor: \"white\"\n                }\n            },\n            maintainAspectRatio: true,\n            responsive: true\n        };\n        return (\n            <div style={{width: '75%', margin: 'auto'}}>\n                <Pie data={data} options={options}/>\n            </div>\n        );\n      \n    }\n}\n\nexport default AkumaPieChart;","import React from 'react'\nimport {Line} from 'react-chartjs-2'\n\nclass AkumaLineChart extends React.Component {\n    render() {\n        const data = {\n            labels: this.props.akumaNumberFrequency['dx'],\n            datasets: [{\n                label: '6',\n                borderColor: '#ffff00',      // yellow\n                fill: false,\n                backgroundColor: '#ffff00',  // yellow\n                data: this.props.akumaNumberFrequency['akumaNumber']\n            }, {\n                label: '666',\n                borderColor: '#9400d3',      // darkViolet\n                fill: false,\n                backgroundColor: '#9400d3',  // darkViolet\n                data: this.props.akumaNumberFrequency['akumaNumberTriple']\n            },\n            {\n                label: 'other',\n                borderColor: '#808080',      // gray\n                fill: false,\n                backgroundColor: '#808080',  // gray\n                data: this.props.akumaNumberFrequency['other']\n            }]\n        };\n\n        const options = {\n            scales: {\n                xAxes: [{\n                    gridLines: {\n                        color: 'white'\n                    },\n                    ticks: {\n                        fontColor: 'white'\n                    }\n                }],\n                yAxes: [{\n                    gridLines: {\n                        color: 'white'\n                    },\n                    ticks: {\n                        fontColor: 'white'\n                    }\n                }]\n            },\n            legend: {\n                labels: {\n                    fontColor: 'white'\n                }\n            },\n            maintainAspectRatio: true,\n            responsive: true\n        };\n        return (\n            <div style={{width: '75%', margin: 'auto'}}>\n                <Line data={data} options={options}/>\n            </div>\n        );\n      \n    }\n}\n\nexport default AkumaLineChart;","import React from 'react'\nimport AkumaPieChart from './AkumaPieChart';\nimport AkumaLineChart from './AkumaLineChart';\n\nclass AkumaChart extends React.Component {\n    render() {\n        this.lastAkumaNumberFrequency = this.props.akumaNumberFrequency.slice(-1)[0];\n\n        this.akumaNumberFrequency = {akumaNumber: [], akumaNumberTriple: [], other: [], dx: []};\n        this.props.akumaNumberFrequency.forEach(frequency => {\n            this.akumaNumberFrequency['akumaNumber'].push(frequency['akumaNumberCount']);\n            this.akumaNumberFrequency['akumaNumberTriple'].push(frequency['akumaNumberTripleCount']);\n            this.akumaNumberFrequency['other'].push(frequency['otherCount']);\n            this.akumaNumberFrequency['dx'].push(frequency['dx']); \n        });\n\n        return(\n            <div>\n                <AkumaPieChart akumaNumberCount={this.lastAkumaNumberFrequency} />\n                <AkumaLineChart akumaNumberFrequency={this.akumaNumberFrequency}/>\n           </div>\n        );\n    }\n}\n\nexport default AkumaChart;","import styled from 'styled-components'\n\nconst NotResultImg = styled.img`\n    height: 320px;\n    width: 240px;\n`\n\nexport default NotResultImg","import React from 'react'\nimport Img from '../images/isNuN_mozaiku.jpg'\nimport NotResultImg from './styledcomponents/NotResultImg'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst AkumaNotResult = (props => {\n    return(\n        <div>\n            <AkumaText>数字以外は入れちゃダメだってこと</AkumaText>\n            <NotResultImg src={Img} />\n        </div>\n    );\n});\n\nexport default AkumaNotResult;\n","import React from 'react'\nimport AkumaView from './AkumaView'\nimport AkumaChart from './AkumaChart';\nimport AkumaNotResult from './AkumaNotResult';\n\nclass AkumaResult extends React.Component {\n    render() {\n        let akumaResultView;\n        \n        if (this.props.inputResult === '') {return <div> </div>}\n\n        if (this.props.inputResult >= 0) {\n            akumaResultView = <AkumaView akumaNumberResult={this.props.akumaNumberResult} resultTexts={this.props.resultTexts}/>\n        } else {\n            akumaResultView =  <AkumaChart akumaNumberFrequency={this.props.akumaNumberFrequency}/>\n        }\n\n        if (isNaN(this.props.inputResult)) {akumaResultView = <AkumaNotResult />}\n        \n        return(\n            <div> {akumaResultView}</div>\n        );\n    }\n}\nexport default AkumaResult;","import styled from 'styled-components'\n\nconst AkumaComponents = styled.div `\n    text-align: center;\n`\n\nexport default AkumaComponents;","import React from 'react'\nimport AkumaForm from './AkumaForm'\nimport AkumaResult from './AkumaResult'\nimport AKumaComponent from './styledcomponents/AkumaComponent'\nimport AkumaHeader from './styledcomponents/AkumaHeader'\n\nconst App = (props => {\n    return (\n        <AKumaComponent>   \n            <AkumaHeader>数字の真実を…</AkumaHeader>     \n            <AkumaForm handleClick={props.setValue} handleChange={props.inputValue} input={props.input}/>\n            <AkumaResult inputResult={props.inputResult} akumaNumberResult={props.akumaNumberResult} resultTexts={props.resultTexts} akumaNumberFrequency={props.akumaNumberFrequency}/>\n        </AKumaComponent>\n    );\n});\n\nexport default App;","const akumaNumber = 6;\nconst reverseAkumaNumber = 9;\nconst akumaNumberTriple = 666;\nconst reverseAkumaNUmberTriple = 999;\nconst specialAkumaNUmber1 = 18;\nconst specialAkumaNUmber2 = 27;\nconst reverseAkumaNumberText = \"9を反転させると6\";\nconst reverseAkumaNUmberTripleText = \"999を反転させると666\"\nconst specialAkumaNUmber1Text = \"18は6 + 6 + 6\";\nconst specialAkumaNUmber2Text = \"27は9 + 9 + 9\";\nconst addOperator = \"+\";\nconst multOperator = \"×\";\n\n/* 0からinputVlueまでの間で悪魔の数字に変換できる数の個数の頻度を数える\n　 横軸はinputValue / 10の値とする\n\n   return akumaNumberFrequency 悪魔の数字の出現頻度の連想配列のarray\n          [\n              { \n                  akumaNumberCount: 6の出現頻度,\n                  akumaNumberTripleCount: 666の出現頻度,\n                  otherCount: 悪魔の数字以外の出現頻度,\n                  dx: グラフの横軸の値\n              },\n              ...\n          ]\n   params inputValue Formで入力した値\n   params akumaNukberFrequency 悪魔の数字の頻度を格納する連想配列\n*/\nexport function akumanumberFrequency(inputValue, akumaNukberFrequency) {\n\n    let dx = parseInt(inputValue / 10);  // 入力した数値の1/10を折れ線グラフの横軸の単位とする\n    let arrayPosition = 0;  \n\n    for (let i = 0; i < inputValue; i++) {\n\n        // 悪魔の数字の推移を求める必要があるため、一つ前の頻度の値を初期値とする\n        if(i >= dx * arrayPosition) {\n            let beforAkumaNumberCount = akumaNukberFrequency[arrayPosition]['akumaNumberCount'];\n            let beforAkumaNumberTripleCount = akumaNukberFrequency[arrayPosition]['akumaNumberTripleCount'];\n            let beforOtherCount = akumaNukberFrequency[arrayPosition]['otherCount'];\n            arrayPosition++;\n            akumaNukberFrequency.push({\n                akumaNumberCount: beforAkumaNumberCount,\n                akumaNumberTripleCount: beforAkumaNumberTripleCount,\n                otherCount: beforOtherCount,\n                dx: dx * arrayPosition\n            });\n        }\n\n        switch(akumaNumberDecision(i, [])) {\n            case akumaNumber:\n                akumaNukberFrequency[arrayPosition]['akumaNumberCount']++;\n                break;\n            case akumaNumberTriple:\n                akumaNukberFrequency[arrayPosition]['akumaNumberTripleCount']++;\n                break;\n            default:\n                    akumaNukberFrequency[arrayPosition]['otherCount']++;\n        }\n    }\n\n    return akumaNukberFrequency;\n}\n\n/* 入力値を悪魔の数字に変換する。引数のresultTextsには悪魔の数字への変換過程を格納する。\n    return 6に変換できた場合 6\n           666に変換できた場合 666\n           変換できなかった場合 false\n    params inputValue Formで入力した値\n    params resultTexts　画面に表示する文字の配列 初期値 []　  \n\n    実行例 inputValue = 12345の時\n          returnする値 6\n          resultTexts = [\n              1+2+3+4+5=15,\n              1+5=6\n          ]\n    となる\n*/\nexport function akumaNumberDecision(inputValue, resultTexts) {\n    if (isNaN(inputValue)) {return false;}\n\n    let checkAkumaNumber = akumaNumberCheck(inputValue, resultTexts);\n    if(checkAkumaNumber !== false) {return checkAkumaNumber;}\n    \n    checkAkumaNumber = calculationOneDigit(inputValue, resultTexts, 0, addOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    checkAkumaNumber = calculationOneDigit(inputValue, resultTexts, 0, multOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    return false;\n}\n\nfunction akumaNumberCheck(number, resultTexts) {\n    number = reverseAndSpecialAkumaNumberCheck(number, resultTexts);\n\n    switch(number) {\n        case akumaNumber:\n            return akumaNumber;\n\n        case akumaNumberTriple:\n            return akumaNumberTriple;\n\n        default:\n            return false;\n    }\n}\n\nfunction reverseAndSpecialAkumaNumberCheck(number, resultTexts) {\n    switch(number) {\n        case reverseAkumaNumber:\n                resultTexts.push(reverseAkumaNumberText);\n                return akumaNumber;\n    \n            case reverseAkumaNUmberTriple:\n                resultTexts.push(reverseAkumaNUmberTripleText);\n                return akumaNumberTriple;\n    \n            case specialAkumaNUmber1:\n                resultTexts.push(specialAkumaNUmber1Text);\n                return akumaNumberTriple;\n    \n            case specialAkumaNUmber2:\n                resultTexts.push(specialAkumaNUmber2Text);\n                return akumaNumberTriple;\n    \n            default:\n                return number;\n    }\n}\n\nfunction calculationOneDigit(inputValue, resultTexts, calculationCount, operator) {\n    let checkAkumaNumber = akumaNumberCheck(inputValue, resultTexts);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    if (inputValue <= 10) { return false; }\n\n    let calculationProcessNumber = numberSplitOneDigit(inputValue);\n    let calculationResult = 0;\n    switch(operator) {\n        case addOperator:\n            calculationResult = numberAddOneDigit(calculationProcessNumber);\n            break;\n        case multOperator:\n            calculationResult = numberMultOneDigit(calculationProcessNumber);\n            break;\n    }\n\n    resultTexts[calculationCount] = calculationProcessTextCreate(calculationProcessNumber, calculationResult, operator);\n\n    checkAkumaNumber = calculationOneDigit(calculationResult, resultTexts, calculationCount+1, addOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    checkAkumaNumber = calculationOneDigit(calculationResult, resultTexts, calculationCount+1, multOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n    \n    resultTexts.splice(calculationCount,1);\n    return false;\n}\n\nfunction numberSplitOneDigit(inputValue) {\n    return [...inputValue + \"\"].map(x => parseInt(x));\n}\n\nfunction numberAddOneDigit(calculationProcessNumber) {\n    return calculationProcessNumber.reduce((a,b) => a+b);\n}\n\nfunction numberMultOneDigit(calculationProcessNumber) {\n    return calculationProcessNumber.reduce((a,b) => a*b);\n}\n\nfunction calculationProcessTextCreate(calculationProcessNumber, calculationResult, operator ) {\n    let resultText = \"\";\n\n    calculationProcessNumber.forEach( number => {\n        resultText += number;\n        resultText += operator;\n    });\n\n    resultText = resultText.slice(0, -1);\n    resultText += (\"=\" + calculationResult);\n\n    return resultText;\n}","import {akumaNumberDecision, akumanumberFrequency} from '../logics/akuma'\n\nexport const SET_VALUE_POSITIVE='SET_VALUE_POSITIVE';\nexport const SET_VALUE_NEGATIVE='SET_VALUE_NEGATIVE';\n\nexport function setValue(input) {\n    let resultTexts = [];\n    if (input >= 0) {\n        let akumaNumberResult = akumaNumberDecision(parseInt(input), resultTexts);\n        return {\n            type: SET_VALUE_POSITIVE,\n            akumaNumberResult: akumaNumberResult,\n            resultTexts: resultTexts,\n            input: input\n        }\n    \n    } else {\n        let akumaNumberFrequency = akumanumberFrequency(Math.abs(input), [{akumaNumberCount: 0, akumaNumberTripleCount: 0, otherCount: 0, dx: 0}]);\n        return {\n            type: SET_VALUE_NEGATIVE,\n            akumaNumberFrequency: akumaNumberFrequency,\n            input: input\n        }\n    }\n\n}\n","import {connect} from 'react-redux'\nimport App from '../components/App'\nimport * as Actions from '../actions'\nimport {bindActionCreators} from 'redux'\n\nfunction mapStateToProps(state) {\n    return {\n        inputResult: state.setValue.input,\n        resultTexts: state.setValue.resultTexts,\n        akumaNumberResult: state.setValue.akumaNumberResult,\n        akumaNumberFrequency: state.setValue.akumaNumberFrequency\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return (bindActionCreators(Actions, dispatch));\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const initialState = {\n    input: \"\"\n}\n\nconst setValue = (prevState = initialState, action) => {\n    switch(action.type) {\n        case 'SET_VALUE_POSITIVE':\n            return {\n                akumaNumberResult: action.akumaNumberResult,\n                resultTexts: action.resultTexts,\n                input: action.input\n            }\n        case 'SET_VALUE_NEGATIVE':\n            return {\n                akumaNumberFrequency: action.akumaNumberFrequency,\n                input: action.input\n            }\n        default:\n            return prevState;\n    }\n}\n\nexport default setValue;","import {combineReducers} from 'redux'\nimport setValue from './setValue'\n\nconst reducer = combineReducers({\n    setValue\n});\n\nexport default reducer;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport {createStore} from 'redux'\nimport reducer from './reducers'\nimport {Provider} from 'react-redux'\n\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);","module.exports = __webpack_public_path__ + \"static/media/6_mozaiku.8adc575a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/666_mozaiku.24cf6c66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/isNuN_mozaiku.a3cd0a0e.jpg\";"],"sourceRoot":""}