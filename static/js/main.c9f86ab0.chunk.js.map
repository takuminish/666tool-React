{"version":3,"sources":["images/6_mozaiku.jpg","images/666_mozaiku.jpg","images/isNuN_mozaiku.jpg","components/styledcomponents/AkumaHeader.js","components/AkumaForm.js","components/styledcomponents/AkumaText.js","components/CalculateView.js","components/styledcomponents/ResultImg.js","components/AkumaNumberImg.js","components/AkumaNumberTripleImg.js","components/AkumaView.js","components/AkumaPieChart.js","components/AkumaLineChart.js","components/AkumaChart.js","components/styledcomponents/NotResultImg.js","components/AkumaNotResult.js","components/AkumaResult.js","components/styledcomponents/AkumaComponent.js","components/App.js","logics/akuma.js","actions/index.js","containers/App.js","reducers/setValue.js","reducers/index.js","index.js"],"names":["module","exports","AkumaHeader","styled","h1","AkumaForm","props","handleChange","e","setState","input","target","value","state","id","type","this","onChange","Button","variant","onClick","handleClick","React","Component","AkumaText","h2","PureCalculateView","pure","resultText","ResultImg","img","PureAkumaNumberImg","src","Img","PureAkumaNumberTripleImg","AkumaView","akumaNumberImg","akumaNumberResult","resultTexts","map","i","key","AkumaPieChart","AkumaLineChart","AkumaChart","NotResultImg","AkumaNotResult","AkumaResult","akumaResultView","inputResult","isNaN","AkumaComponents","div","App","setValue","inputValue","akumaNumber","reverseAkumaNumber","akumaNumberTriple","reverseAkumaNUmberTriple","specialAkumaNUmber1","specialAkumaNUmber2","reverseAkumaNumberText","reverseAkumaNUmberTripleText","specialAkumaNUmber1Text","specialAkumaNUmber2Text","addOperator","multOperator","akumaNumberCheck","number","push","reverseAndSpecialAkumaNumberCheck","calculationOneDigit","calculationCount","operator","checkAkumaNumber","calculationProcessNumber","x","parseInt","numberSplitOneDigit","calculationResult","reduce","a","b","numberAddOneDigit","numberMultOneDigit","forEach","slice","calculationProcessTextCreate","splice","SET_VALUE","akumaNumberDecision","connect","dispatch","bindActionCreators","Actions","initialState","prevState","action","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9f86ab0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/6_mozaiku.8adc575a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/666_mozaiku.24cf6c66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/isNuN_mozaiku.a3cd0a0e.jpg\";","import styled from 'styled-components'\n\nconst AkumaHeader = styled.h1 `\n    color: white;\n`\n\nexport default AkumaHeader; ","import React from 'react'\nimport {Button} from 'react-bootstrap'\nimport AkumaHeader from './styledcomponents/AkumaHeader'\n\nclass AkumaForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\"\n        };\n    }\n    render() {\n        return(\n            <div id=\"akuma-form\">\n                <div>\n                    <input type=\"text\" value={this.state.input} onChange={this.handleChange}/>\n                    <Button variant=\"dark\" onClick={() => this.props.handleClick(this.state.input)}>解き明かす…</Button>\n                </div>\n            </div> \n        );\n    }\n\n    handleChange = e => {\n        this.setState({input: e.target.value});\n    }\n}\nexport default AkumaForm;","import styled from 'styled-components'\n\nconst AkumaText = styled.h2 `\n    color: white;\n`\n\nexport default AkumaText; ","import {pure} from 'recompose'\nimport React from 'react'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst CalculateView = (props => {\n    return(\n        <div>\n            <AkumaText>{props.resultText}</AkumaText>\n            <AkumaText>↓</AkumaText>\n      </div>\n    );\n});\n\nconst PureCalculateView = pure(CalculateView);\n\nexport default PureCalculateView;","import styled from 'styled-components'\n\nconst ResultImg = styled.img `\n    height: 240px;\n    width: 420px;\n`\n\nexport default ResultImg;","import React from 'react'\nimport {pure} from 'recompose'\nimport Img from '../images/6_mozaiku.jpg'\nimport ResultImg from './styledcomponents/ResultImg'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst AkumaNumberImg = (props => {\n    return(\n        <div>\n            <AkumaText>悪魔の数字</AkumaText>\n            <ResultImg id=\"akumanumber-img\" src={Img} />        \n        </div>\n    );\n});\n\nconst PureAkumaNumberImg = pure(AkumaNumberImg);\n\nexport default PureAkumaNumberImg;","import React from 'react'\nimport {pure} from 'recompose'\nimport Img from '../images/666_mozaiku.jpg'\nimport ResultImg from './styledcomponents/ResultImg'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst AkumaNumberTripleImg = (props => {\n    return(\n        <div>\n            <AkumaText>悪魔の数字　フリーメイソン!!</AkumaText>\n            <ResultImg src={Img} />        \n        </div>\n    );\n});\n\nconst PureAkumaNumberTripleImg = pure(AkumaNumberTripleImg);\n\nexport default PureAkumaNumberTripleImg;","import React from 'react'\nimport CalculateView from './CalculateView'\nimport AkumaNumberImg from './AkumaNumberImg';\nimport AkumaNumberTripleImg from './AkumaNumberTripleImg';\n\nclass AkumaView extends React.Component {\n    render() {\n        let akumaNumberImg;\n\n        switch(this.props.akumaNumberResult) {\n            case 6:\n                akumaNumberImg = <AkumaNumberImg />\n            break;\n\n            case 666:\n                akumaNumberImg = <AkumaNumberTripleImg />\n\n            break;\n        }\n        return(\n            <div>\n                {this.props.resultTexts.map((resultText, i) => <CalculateView key={i} resultText={resultText} />)}\n                {akumaNumberImg}\n            </div>\n        );\n    }\n}\nexport default AkumaView;","import React from 'react'\n\nclass AkumaPieChart extends React.Component {\n    render() {\n        return(\n            <div></div>\n        );\n    }\n}\n\nexport default AkumaPieChart;","import React from 'react'\n\nclass AkumaLineChart extends React.Component {\n    render() {\n        return(\n            <div></div>\n        );\n    }\n}\n\nexport default AkumaLineChart;","import React from 'react'\nimport AkumaPieChart from './AkumaPieChart';\nimport AkumaLineChart from './AkumaLineChart';\n\nclass AkumaChart extends React.Component {\n    render() {\n        return(\n            <div>\n                <AkumaPieChart />\n                <AkumaLineChart />\n           </div>\n        );\n    }\n}\n\nexport default AkumaChart;","import styled from 'styled-components'\n\nconst NotResultImg = styled.img`\n    height: 320px;\n    width: 240px;\n`\n\nexport default NotResultImg","import React from 'react'\nimport Img from '../images/isNuN_mozaiku.jpg'\nimport NotResultImg from './styledcomponents/NotResultImg'\nimport AkumaText from './styledcomponents/AkumaText'\n\nconst AkumaNotResult = (props => {\n    return(\n        <div>\n            <AkumaText>数字以外は入れちゃダメだってこと</AkumaText>\n            <NotResultImg src={Img} />\n        </div>\n    );\n});\n\nexport default AkumaNotResult;\n","import React from 'react'\nimport AkumaView from './AkumaView'\nimport AkumaChart from './AkumaChart';\nimport AkumaNotResult from './AkumaNotResult';\n\nclass AkumaResult extends React.Component {\n    render() {\n        let akumaResultView;\n        if (this.props.inputResult === '') {akumaResultView = <div></div>}\n        this.props.inputResult > 0? akumaResultView = <AkumaView akumaNumberResult={this.props.akumaNumberResult} resultTexts={this.props.resultTexts}/> : akumaResultView =  <AkumaChart /> \n        if (isNaN(this.props.inputResult)) {akumaResultView = <AkumaNotResult />}\n        \n        return(\n            <div> {akumaResultView}</div>\n        );\n    }\n}\nexport default AkumaResult;","import styled from 'styled-components'\n\nconst AkumaComponents = styled.div `\n    text-align: center;\n`\n\nexport default AkumaComponents;","import React from 'react'\nimport AkumaForm from './AkumaForm'\nimport AkumaResult from './AkumaResult'\nimport AKumaComponent from './styledcomponents/AkumaComponent'\nimport AkumaHeader from './styledcomponents/AkumaHeader'\n\nconst App = (props => {\n    return (\n        <AKumaComponent>   \n            <AkumaHeader>数字の真実を…</AkumaHeader>     \n            <AkumaForm handleClick={props.setValue} handleChange={props.inputValue} input={props.input}/>\n            <AkumaResult inputResult={props.inputResult} akumaNumberResult={props.akumaNumberResult} resultTexts={props.resultTexts}/>\n        </AKumaComponent>\n    );\n});\n\nexport default App;","const akumaNumber = 6;\nconst reverseAkumaNumber = 9;\nconst akumaNumberTriple = 666;\nconst reverseAkumaNUmberTriple = 999;\nconst specialAkumaNUmber1 = 18;\nconst specialAkumaNUmber2 = 27;\nconst reverseAkumaNumberText = \"9を反転させると6\";\nconst reverseAkumaNUmberTripleText = \"999を反転させると666\"\nconst specialAkumaNUmber1Text = \"18は6 + 6 + 6\";\nconst specialAkumaNUmber2Text = \"27は9 + 9 + 9\";\nconst addOperator = \"+\";\nconst multOperator = \"×\";\n\nexport function akumaNumberDecision(inputValue, resultTexts) {\n    if (isNaN(inputValue)) {return false;}\n    let checkAkumaNumber = akumaNumberCheck(inputValue, resultTexts);\n    if(checkAkumaNumber !== false) {return checkAkumaNumber;}\n    checkAkumaNumber = calculationOneDigit(inputValue, resultTexts, 0, addOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    checkAkumaNumber = calculationOneDigit(inputValue, resultTexts, 0, multOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    return false;\n}\n\nfunction akumaNumberCheck(number, resultTexts) {\n    number = reverseAndSpecialAkumaNumberCheck(number, resultTexts);\n\n    switch(number) {\n        case akumaNumber:\n            return akumaNumber;\n\n        case akumaNumberTriple:\n            return akumaNumberTriple;\n\n        default:\n            return false;\n    }\n}\n\nfunction reverseAndSpecialAkumaNumberCheck(number, resultTexts) {\n    switch(number) {\n        case reverseAkumaNumber:\n                resultTexts.push(reverseAkumaNumberText);\n                return akumaNumber;\n    \n            case reverseAkumaNUmberTriple:\n                resultTexts.push(reverseAkumaNUmberTripleText);\n                return akumaNumberTriple;\n    \n            case specialAkumaNUmber1:\n                resultTexts.push(specialAkumaNUmber1Text);\n                return akumaNumberTriple;\n    \n            case specialAkumaNUmber2:\n                resultTexts.push(specialAkumaNUmber2Text);\n                return akumaNumberTriple;\n    \n            default:\n                return number;\n    }\n}\n\nfunction calculationOneDigit(inputValue, resultTexts, calculationCount, operator) {\n    let checkAkumaNumber = akumaNumberCheck(inputValue, resultTexts);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    if (inputValue <= 10) { return false; }\n\n    let calculationProcessNumber = numberSplitOneDigit(inputValue);\n    let calculationResult = 0;\n    switch(operator) {\n        case addOperator:\n            calculationResult = numberAddOneDigit(calculationProcessNumber);\n            break;\n        case multOperator:\n            calculationResult = numberMultOneDigit(calculationProcessNumber);\n            break;\n    }\n\n    resultTexts[calculationCount] = calculationProcessTextCreate(calculationProcessNumber, calculationResult, operator);\n\n    checkAkumaNumber = calculationOneDigit(calculationResult, resultTexts, calculationCount+1, addOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n\n    checkAkumaNumber = calculationOneDigit(calculationResult, resultTexts, calculationCount+1, multOperator);\n    if(checkAkumaNumber !== false) { return checkAkumaNumber;}\n    \n    resultTexts.splice(calculationCount,1);\n    return false;\n}\n\nfunction numberSplitOneDigit(inputValue) {\n    return [...inputValue + \"\"].map(x => parseInt(x));\n}\n\nfunction numberAddOneDigit(calculationProcessNumber) {\n    return calculationProcessNumber.reduce((a,b) => a+b);\n}\n\nfunction numberMultOneDigit(calculationProcessNumber) {\n    return calculationProcessNumber.reduce((a,b) => a*b);\n}\n\nfunction calculationProcessTextCreate(calculationProcessNumber, calculationResult, operator ) {\n    let resultText = \"\";\n\n    calculationProcessNumber.forEach( number => {\n        resultText += number;\n        resultText += operator;\n    });\n\n    resultText = resultText.slice(0, -1);\n    resultText += (\"=\" + calculationResult);\n\n    return resultText;\n}","import {akumaNumberDecision} from '../logics/akuma'\n\nexport const SET_VALUE='SET_VALUE';\n\nexport function setValue(input) {\n    let resultTexts = [];\n    let akumaNumberResult = akumaNumberDecision(parseInt(input), resultTexts);\n    return {\n        type: SET_VALUE,\n        akumaNumberResult: akumaNumberResult,\n        resultTexts: resultTexts,\n        input: input\n    }\n}\n","import {connect} from 'react-redux'\nimport App from '../components/App'\nimport * as Actions from '../actions'\nimport {bindActionCreators} from 'redux'\n\nfunction mapStateToProps(state) {\n    return {\n        inputResult: state.setValue.input,\n        resultTexts: state.setValue.resultTexts,\n        akumaNumberResult: state.setValue.akumaNumberResult\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return (bindActionCreators(Actions, dispatch));\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const initialState = {\n    input: \"\"\n}\n\nconst setValue = (prevState = initialState, action) => {\n    switch(action.type) {\n        case 'SET_VALUE':\n            return {\n                akumaNumberResult: action.akumaNumberResult,\n                resultTexts: action.resultTexts,\n                input: action.input\n            }\n        default:\n            return prevState;\n    }\n}\n\nexport default setValue;","import {combineReducers} from 'redux'\nimport setValue from './setValue'\n\nconst reducer = combineReducers({\n    setValue\n});\n\nexport default reducer;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport {createStore} from 'redux'\nimport reducer from './reducers'\nimport {Provider} from 'react-redux'\n\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}